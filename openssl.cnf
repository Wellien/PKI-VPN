HOME			= .
RANDFILE		= $ENV::HOME/.rnd

[ ca ]

default_ca	= root_ca	#definition du root CA come CA par default

[ root_ca ]

root_ca		= /etc/ssl/root_ca	#variable de base
certs		= $root_ca/certs	#dossier où les certificats émis sont conservés
new_certs_dir	= $root_ca/newcerts	#dossier où les certificats crées sont conservés
database	= $root_ca/index/index.txt	#dossier de la base de donnée/des logs
certificate	= $root_ca/certs/root_ca.pem	#l'emplacement du root CA
serial		= $root_ca/serial/serial	#fichier contenant le numéro de série
private_key	= $root_ca/private/root_ca.key	#emplacement de la clé privé de la CA
default_days	= 7300			#la durée de validité de la CA en jour
default_md	= sha384		#Alogorithme de hashage
preserve	= no			#ne conserve pas les DN données
policy		= policy_match		#référence à l'extension dans le fichier de conf sur les régles concernant les certificats

[ client_ca ]
client_ca	= /etc/ssl/client_ca
certs		= $client_ca/certs
new_certs_dir	= $client_ca/newcerts
database	= $client_ca/index/index.txt
certificate	= $client_ca/certs/client_ca.pem
serial		= $client_ca/serial/serial
private_key	= $client_ca/private/client_ca.key
default_days	= 365
default_md	= sha384
preserve	= no			#ne conserve pas les DN données
policy		= policy_anything	#voir policy_anythinh pour la politique à aborder

[ serveur_ca ]
serveur_ca	= /etc/ssl/serveur_ca
certs		= $serveur_ca/certs
new_certs_dir	= $serveur_ca/newcerts
database	= $serveur_ca/index/index.txt
certificate	= $serveur_ca/certs/serveur_ca.pem
serial		= $serveur_ca/serial/serial
private_key	= $serveur_ca/private/serveur_ca.key
default_days	= 365
default_md	= sha384
preserve	= no
policy		= policy_anything


[ policy_match ]
countryName		= match		            #Le nom du pays doit être le même que celui de la CA.
stateOrProvinceName	= match		      #La région ou le département doit être le même que celui de la CA.
organizationName	= match		        #Le nom de l'organisation doit être le même que celui de la CA.
organizationalUnitName	= optional	#Le nom de l'unité de l'organisation est libre et optionnel.
commonName		= supplied	          #Le nom du certificat ou de la sous-autorité est libre mais doit être donner.
emailAddress		= supplied          #L'adresse mail est libre mais doit être donner.

[ policy_anything ]
countryName		= optional
stateOrProvinceName	= optional
localityName		= optional
organizationName	= optional
organizationalUnitName	= optional
commonName		= supplied	#doit être donner
emailAddress		= optional


[ req ]					#paramètre par défaut pour la creation d'un certificat
default_bits		= 2048
distinguished_name	= req_distinguished_name
attributes		= req_attributes

[ req_distinguished_name ]		#paramètre par défaut pour la creation d'un certificat
countryName			= Country Name (2 letter code)
countryName_default        	= FR
countryName_min                 = 2
countryName_max                 = 2
stateOrProvinceName             = State or Province Name (full name)
stateOrProvinceName_default     = Auvergne-Rhone-Alpes
localityName                    = Locality Name (city)
localityName_default            = Annecy
0.organizationName              = Organization Name (company)
0.organizationName_default      = IUT
organizationalUnitName		= Organizational Unit Name (section)
organizationalUnitName_default	= RT
commonName			= Common Name (server DN or YOUR name)	#Nom de domaine
commonName_max			= 64

emailAddress			= Email Address
emailAddress_max		= 64

[ req_attributes ]
challengePassword		= A challenge password
challengePassword_min		= 4
challengePassword_max		= 20

[ ROOT_CA ]
nsComment                       = "ROOT CA"
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always
basicConstraints                = critical,CA:TRUE,pathlen:1
keyUsage                        = keyCertSign, cRLSign


[ CLIENT_CA ]
nsComment                       = "CLIENT CA"
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always
basicConstraints                = critical,CA:TRUE,pathlen:0
keyUsage                        = keyCertSign, cRLSign
nsCertType                      = sslCA 

[ SERVEUR_CA ]
nsComment                       = "SERVEUR CA"
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always
basicConstraints                = critical,CA:TRUE,pathlen:0
keyUsage                        = keyCertSign, cRLSign
nsCertType                      = sslCA

[ SERVEUR ]
nsComment                       = "Server Certificate"
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always
basicConstraints                = critical,CA:FALSE
keyUsage                        = critical, digitalSignature, nonRepudiation, keyEncipherment
nsCertType                      = server
extendedKeyUsage		= serverAuth
issuerAltName			= issuer:copy

[ CLIENT ]
nsComment                       = "Client Certificate"
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always
basicConstraints                = critical,CA:FALSE
keyUsage                        = critical, digitalSignature, nonRepudiation
nsCertType                      = client
extendedKeyUsage		= clientAuth, emailProtection
issuerAltName			= issuer:copy

[ MAIL ]
nsComment                       = "Mail Certificate"
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always
basicConstraints                = critical,CA:FALSE
keyUsage                        = keyEncipherment, digitalSignature, nonRepudiation
nsCertType                      = email
extendedKeyUsage		= emailProtection
issuerAltName			= issuer:copy

